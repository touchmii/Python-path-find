# coding=utf-8
from __future__ import print_function
#import csv
import xlrd
import copy
import os

path = os.path.dirname(__file__)

class mapcsv:
	def __init__(self):
		self.w = 7
		self.h = 6
		self.pathTag = 0
		self.path = []
		#agvfile = open("AGV-Route.csv")
		#reader = csv.reader(agvfile)
		agvfile = xlrd.open_workbook(filename=path+'/map.xlsx')
		sheet = agvfile.sheet_by_index(0)
		sheet2 = agvfile.sheet_by_index(2)
		self.data = []
		self.pointbk = []
		self.pointdicbk = []
		self.pointdicdoor = []
		self.pointdoor = []
		self.pointdic = {}
		for x in range(0,self.h):
			row = sheet.row_values(x)
			for item in range(len(row)-1,-1,-1):
				if row[item] == '':
					row[item] = 1
				# elif type(row[item]) == type('A'):
				elif isinstance(row[item], str):
					row[item] = 88
				elif row[item] > 10:
					self.pointdic[int(row[item])] = [x, item]
			row = list(map(int,row))
			self.data.append(row)
			##print(row)
		for x in range(0,3):
			row = sheet2.row_values(x)
			#print(row)
			#for item in range(len(row)-1,-1,-1):
			row = list(map(int,row))
			self.pointbk.extend(row)
		row = sheet2.row_values(4)
		self.pointdoor = list(map(int,row))
		self.pointdoor.sort()
		self.pointdoor = self.pointdoor[11:]
		self.pointbk.sort()
		self.pointbk = self.pointbk[23:]
		self.pointdicbk = dict.fromkeys(self.pointbk ,1)
		self.pointdicdoor = dict.fromkeys(self.pointdoor ,1)
		# print(self.pointbk)
		# print(self.pointdoor)
#		print(self.pointdic)
		# print(self.data)
		# print(self.pointdicbk)
		# print(self.pointdicdoor)
		self.databack = copy.deepcopy(self.data)
		
	def showMap(self):
		for item in self.data:
			print(item)
		return;
	def showPoint(self,x,y):
		print(self.data[x][y])
		return;
	
	def setMap(self,point):
		self.data[point.x][point.y] = self.pathTag
		return;
	def isPass(self, point):
		if (point.x < 0 or point.x > self.h-1 ) or (point.y < 0 or point.y > self.w - 1):
			return False;
		if (self.data[point.x][point.y] > 10) or (self.data[point.x][point.y] == 0):
			return True;
	def isSpace(self, point):
		if self.data[point.x][point.y] == 0:
			return True;
	def direct_g(self, node, direct):
		point_id = data_list[node.x][node.y]
		if point_id not in point_fixg_dic:
			return 10
		else:
			return point_fixg_dic[point_id][direct]

#A星算法是反向寻找路径，即终点出发到起点，设置ID四方位距离是需注意
point_fixg_dic = {203: [10, 10, 100, 10], 204: [10, 10, 900, 10], 205: [10, 10, 10, 100], 206: [1000, 10, 10, 10], 207: [10, 10, 10, 100], 208: [100, 10, 1000, 10], 209: [10, 100, 10, 10], 210: [10, 100, 10, 10], 327: [10, 100, 10, 10], 752: [10, 100, 10, 10], 999: [10, 10, 100, 10], 784: [100, 10, 10, 10], 789: [10, 10, 10, 100]}

data_list = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 850, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 785, 784, 787, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 849, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [729, 1, 88, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 751, 750, 749, 1, 1, 788, 789, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 88, 2, 1, 1, 1, 1, 1, 1, 848, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [728, 727, 726, 458, 1, 1, 1, 1, 745, 744, 743, 1, 1, 1, 1, 752, 341, 138, 1, 1, 783, 786, 1, 1, 1, 1, 803, 804, 805, 1, 1, 1, 825, 824, 823, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 847, 1, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 88, 457, 1, 1, 1, 4, 1, 1, 742, 1, 1, 1, 1, 1, 1, 748, 1, 1, 782, 1, 1, 1, 1, 1, 802, 1, 1, 1, 1, 1, 1, 1, 822, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 846, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 456, 1, 1, 1, 1, 1, 88, 741, 88, 1, 1, 1, 1, 88, 747, 88, 88, 781, 88, 1, 1, 1, 88, 801, 88, 1, 1, 1, 1, 1, 88, 821, 88, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 88, 845, 88, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [685, 1, 1, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 0, 0, 0, 0, 0, 0, 0, 0, 494, 495, 88, 1, 844, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [684, 1, 88, 454, 1, 1, 1, 1, 1, 88, 260, 88, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 496, 841, 842, 843, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [683, 682, 681, 453, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 1, 497, 88, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 88, 452, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 498, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [665, 1, 1, 451, 1, 1, 1, 1, 3, 1, 0, 1, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 1, 1, 1, 1, 1, 499, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [664, 1, 88, 450, 1, 1, 1, 1, 1, 1, 259, 1, 1, 154, 1, 155, 1, 156, 1, 157, 1, 158, 1, 159, 1, 160, 1, 161, 1, 162, 1, 163, 1, 164, 1, 165, 1, 166, 1, 167, 1, 1, 1, 1, 1, 1, 500, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [663, 662, 661, 449, 1, 1, 1, 88, 137, 347, 258, 1, 1, 381, 1, 382, 1, 383, 1, 384, 1, 385, 1, 386, 1, 387, 1, 388, 1, 389, 1, 390, 1, 391, 1, 392, 1, 393, 1, 394, 1, 1, 1, 1, 1, 1, 501, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 88, 448, 1, 1, 1, 1, 1, 1, 257, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 1, 1, 1, 1, 1, 1, 502, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 0, 1, 1, 1, 88, 136, 346, 256, 1, 1, 1, 1, 1, 1, 363, 1, 364, 1, 365, 1, 366, 1, 367, 1, 368, 1, 1, 1, 370, 1, 371, 1, 372, 1, 373, 1, 374, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 255, 1, 1, 1, 1, 1, 1, 141, 1, 142, 1, 143, 1, 144, 1, 145, 1, 146, 1, 1, 1, 148, 1, 149, 1, 150, 1, 151, 1, 152, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 0, 1, 1, 1, 88, 135, 345, 254, 1, 1, 1, 1, 1, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 1, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 253, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 88, 1, 88, 1, 88, 1, 116, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 0, 1, 1, 1, 88, 134, 344, 252, 262, 263, 1, 1, 1, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 1, 1, 178, 1, 179, 1, 115, 1, 332, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 251, 88, 1, 1, 1, 1, 1, 172, 1, 173, 1, 174, 1, 175, 1, 176, 1, 177, 1, 1, 1, 329, 1, 330, 1, 331, 1, 327, 207, 206, 1, 88, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 0, 1, 1, 1, 88, 133, 343, 250, 1, 1, 1, 1, 1, 1, 317, 1, 318, 1, 319, 1, 320, 1, 321, 1, 322, 1, 1, 1, 324, 1, 325, 1, 326, 1, 203, 209, 208, 1, 88, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 447, 1, 1, 1, 1, 1, 1, 249, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 25, 204, 1, 88, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 88, 446, 1, 1, 1, 88, 132, 342, 248, 1, 1, 301, 1, 302, 1, 303, 1, 304, 1, 305, 1, 306, 1, 307, 1, 308, 1, 309, 1, 310, 1, 311, 1, 312, 1, 313, 1, 1, 1, 1, 1, 1, 1, 1, 503, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 642, 641, 445, 1, 1, 1, 1, 1, 1, 247, 1, 1, 101, 1, 102, 1, 103, 1, 104, 1, 105, 1, 106, 1, 107, 1, 108, 1, 109, 1, 110, 1, 111, 1, 112, 1, 113, 1, 1, 1, 1, 1, 1, 1, 1, 504, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 643, 88, 444, 1, 1, 1, 1, 1, 1, 246, 1, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 1, 1, 1, 1, 1, 1, 1, 505, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 644, 1, 443, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 880, 879, 878, 1, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 506, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 645, 1, 442, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 877, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 507, 1, 1, 10, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1], [1, 646, 1, 441, 1, 1, 1, 1, 1, 88, 245, 88, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 88, 876, 88, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 508, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 647, 1, 436, 435, 434, 433, 432, 431, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414, 413, 412, 411, 410, 409, 408, 407, 406, 405, 404, 403, 0, 0, 0, 0, 0, 0, 0, 0, 402, 401, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 88, 621, 88, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 88, 601, 88, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 88, 581, 88, 1, 1, 1, 1, 1, 88, 565, 88, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 622, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 602, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 582, 1, 1, 1, 1, 1, 1, 1, 566, 1, 1, 571], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 624, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 603, 607, 604, 605, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 583, 1, 1, 1, 1, 1, 1, 1, 567, 568, 569, 570], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 88, 623, 88, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 584, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 626, 625, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 585, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 627, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 588, 587, 586, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 628, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
point_dic = {850: [0, 49], 849: [1, 49], 787: [1, 21], 784: [1, 20], 785: [1, 19], 848: [2, 49], 789: [2, 21], 788: [2, 20], 749: [2, 17], 750: [2, 16], 751: [2, 15], 729: [2, 0], 847: [3, 49], 823: [3, 34], 824: [3, 33], 825: [3, 32], 805: [3, 28], 804: [3, 27], 803: [3, 26], 786: [3, 21], 783: [3, 20], 138: [3, 17], 341: [3, 16], 752: [3, 15], 743: [3, 10], 744: [3, 9], 745: [3, 8], 458: [3, 3], 726: [3, 2], 727: [3, 1], 728: [3, 0], 846: [4, 49], 822: [4, 34], 802: [4, 26], 782: [4, 20], 748: [4, 17], 742: [4, 10], 457: [4, 3], 845: [5, 49], 821: [5, 34], 801: [5, 26], 781: [5, 20], 747: [5, 17], 741: [5, 10], 456: [5, 3], 844: [6, 49], 495: [6, 46], 494: [6, 45], 493: [6, 36], 492: [6, 35], 491: [6, 34], 490: [6, 33], 489: [6, 32], 488: [6, 31], 487: [6, 30], 486: [6, 29], 485: [6, 28], 484: [6, 27], 483: [6, 26], 482: [6, 25], 481: [6, 24], 480: [6, 23], 479: [6, 22], 478: [6, 21], 477: [6, 20], 476: [6, 19], 475: [6, 18], 474: [6, 17], 473: [6, 16], 472: [6, 15], 471: [6, 14], 470: [6, 13], 469: [6, 12], 468: [6, 11], 467: [6, 10], 466: [6, 9], 465: [6, 8], 464: [6, 7], 463: [6, 6], 462: [6, 5], 461: [6, 4], 455: [6, 3], 685: [6, 0], 843: [7, 49], 842: [7, 48], 841: [7, 47], 496: [7, 46], 260: [7, 10], 454: [7, 3], 684: [7, 0], 497: [8, 46], 453: [8, 3], 681: [8, 2], 682: [8, 1], 683: [8, 0], 498: [9, 46], 452: [9, 3], 499: [10, 46], 451: [10, 3], 665: [10, 0], 500: [11, 46], 167: [11, 39], 166: [11, 37], 165: [11, 35], 164: [11, 33], 163: [11, 31], 162: [11, 29], 161: [11, 27], 160: [11, 25], 159: [11, 23], 158: [11, 21], 157: [11, 19], 156: [11, 17], 155: [11, 15], 154: [11, 13], 259: [11, 10], 450: [11, 3], 664: [11, 0], 501: [12, 46], 394: [12, 39], 393: [12, 37], 392: [12, 35], 391: [12, 33], 390: [12, 31], 389: [12, 29], 388: [12, 27], 387: [12, 25], 386: [12, 23], 385: [12, 21], 384: [12, 19], 383: [12, 17], 382: [12, 15], 381: [12, 13], 258: [12, 10], 347: [12, 9], 137: [12, 8], 449: [12, 3], 661: [12, 2], 662: [12, 1], 663: [12, 0], 502: [13, 46], 293: [13, 39], 292: [13, 38], 291: [13, 37], 290: [13, 36], 289: [13, 35], 288: [13, 34], 287: [13, 33], 286: [13, 32], 285: [13, 31], 284: [13, 30], 283: [13, 29], 282: [13, 28], 281: [13, 27], 280: [13, 26], 279: [13, 25], 278: [13, 24], 277: [13, 23], 276: [13, 22], 275: [13, 21], 274: [13, 20], 273: [13, 19], 272: [13, 18], 271: [13, 17], 270: [13, 16], 269: [13, 15], 268: [13, 14], 267: [13, 13], 266: [13, 12], 265: [13, 11], 257: [13, 10], 448: [13, 3], 374: [14, 39], 373: [14, 37], 372: [14, 35], 371: [14, 33], 370: [14, 31], 368: [14, 27], 367: [14, 25], 366: [14, 23], 365: [14, 21], 364: [14, 19], 363: [14, 17], 256: [14, 10], 346: [14, 9], 136: [14, 8], 152: [15, 39], 151: [15, 37], 150: [15, 35], 149: [15, 33], 148: [15, 31], 146: [15, 27], 145: [15, 25], 144: [15, 23], 143: [15, 21], 142: [15, 19], 141: [15, 17], 255: [15, 10], 254: [16, 10], 345: [16, 9], 135: [16, 8], 116: [17, 37], 253: [17, 10], 332: [18, 37], 115: [18, 35], 179: [18, 33], 178: [18, 31], 263: [18, 12], 262: [18, 11], 252: [18, 10], 344: [18, 9], 134: [18, 8], 206: [19, 39], 207: [19, 38], 327: [19, 37], 331: [19, 35], 330: [19, 33], 329: [19, 31], 177: [19, 27], 176: [19, 25], 175: [19, 23], 174: [19, 21], 173: [19, 19], 172: [19, 17], 251: [19, 10], 208: [20, 39], 209: [20, 38], 203: [20, 37], 326: [20, 35], 325: [20, 33], 324: [20, 31], 322: [20, 27], 321: [20, 25], 320: [20, 23], 319: [20, 21], 318: [20, 19], 317: [20, 17], 250: [20, 10], 343: [20, 9], 133: [20, 8], 204: [21, 39], 210: [21, 37], 211: [21, 36], 212: [21, 35], 213: [21, 34], 214: [21, 33], 215: [21, 32], 216: [21, 31], 217: [21, 30], 218: [21, 29], 219: [21, 28], 220: [21, 27], 221: [21, 26], 222: [21, 25], 223: [21, 24], 224: [21, 23], 225: [21, 22], 226: [21, 21], 227: [21, 20], 228: [21, 19], 229: [21, 18], 230: [21, 17], 231: [21, 16], 232: [21, 15], 233: [21, 14], 234: [21, 13], 235: [21, 12], 236: [21, 11], 249: [21, 10], 447: [21, 3], 503: [22, 46], 313: [22, 37], 312: [22, 35], 311: [22, 33], 310: [22, 31], 309: [22, 29], 308: [22, 27], 307: [22, 25], 306: [22, 23], 305: [22, 21], 304: [22, 19], 303: [22, 17], 302: [22, 15], 301: [22, 13], 248: [22, 10], 342: [22, 9], 132: [22, 8], 446: [22, 3], 504: [23, 46], 113: [23, 37], 112: [23, 35], 111: [23, 33], 110: [23, 31], 109: [23, 29], 108: [23, 27], 107: [23, 25], 106: [23, 23], 105: [23, 21], 104: [23, 19], 103: [23, 17], 102: [23, 15], 101: [23, 13], 247: [23, 10], 445: [23, 3], 641: [23, 2], 642: [23, 1], 505: [24, 46], 246: [24, 10], 444: [24, 3], 643: [24, 1], 506: [25, 46], 878: [25, 34], 879: [25, 33], 880: [25, 32], 443: [25, 3], 644: [25, 1], 507: [26, 46], 877: [26, 34], 442: [26, 3], 645: [26, 1], 508: [27, 46], 876: [27, 34], 245: [27, 10], 441: [27, 3], 646: [27, 1], 561: [28, 57], 560: [28, 56], 559: [28, 55], 558: [28, 54], 557: [28, 53], 556: [28, 52], 555: [28, 51], 554: [28, 50], 553: [28, 49], 552: [28, 48], 551: [28, 47], 401: [28, 46], 402: [28, 45], 403: [28, 36], 404: [28, 35], 405: [28, 34], 406: [28, 33], 407: [28, 32], 408: [28, 31], 409: [28, 30], 410: [28, 29], 411: [28, 28], 412: [28, 27], 413: [28, 26], 414: [28, 25], 415: [28, 24], 416: [28, 23], 417: [28, 22], 418: [28, 21], 419: [28, 20], 420: [28, 19], 421: [28, 18], 422: [28, 17], 423: [28, 16], 424: [28, 15], 425: [28, 14], 426: [28, 13], 427: [28, 12], 428: [28, 11], 429: [28, 10], 430: [28, 9], 431: [28, 8], 432: [28, 7], 433: [28, 6], 434: [28, 5], 435: [28, 4], 436: [28, 3], 647: [28, 1], 565: [29, 57], 581: [29, 49], 601: [29, 32], 621: [29, 16], 571: [30, 60], 566: [30, 57], 582: [30, 49], 602: [30, 32], 622: [30, 16], 570: [31, 60], 569: [31, 59], 568: [31, 58], 567: [31, 57], 583: [31, 49], 605: [31, 35], 604: [31, 34], 607: [31, 33], 603: [31, 32], 624: [31, 16], 584: [32, 49], 623: [32, 16], 585: [33, 49], 625: [33, 16], 626: [33, 15], 586: [34, 49], 587: [34, 48], 588: [34, 47], 627: [34, 15], 628: [35, 15]}
point_dic2 = {152: [0, 3], 159: [0, 2], 171: [0, 1], 192: [0, 0], 197: [1, 1], 337: [2, 3], 183: [2, 2], 173: [2, 0], 195: [3, 2], 151: [3, 1]}
point_bk = [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 173, 174, 175, 176, 177, 178, 179, 571, 588, 605, 628, 647, 665, 685, 729, 745, 752, 785, 805, 825, 850, 880]
point_door = [0, 245, 260, 565, 581, 601, 621, 623, 641, 661, 681, 726, 741, 747, 781, 801, 821, 841, 845, 876]
point_dic_bk = {0: 1, 101: 1, 102: 1, 103: 1, 104: 1, 105: 1, 106: 1, 107: 1, 108: 1, 109: 1, 110: 1, 111: 1, 112: 1, 113: 1, 115: 1, 116: 1, 132: 1, 133: 1, 134: 1, 135: 1, 136: 1, 137: 1, 141: 1, 142: 1, 143: 1, 144: 1, 145: 1, 146: 1, 148: 1, 149: 1, 150: 1, 151: 1, 152: 1, 154: 1, 155: 1, 156: 1, 157: 1, 158: 1, 159: 1, 160: 1, 161: 1, 162: 1, 163: 1, 164: 1, 165: 1, 166: 1, 167: 1, 172: 1, 173: 1, 174: 1, 175: 1, 176: 1, 177: 1, 178: 1, 179: 1, 571: 1, 588: 1, 605: 1, 628: 1, 647: 1, 665: 1, 685: 1, 729: 1, 745: 1, 752: 1, 785: 1, 805: 1, 825: 1, 850: 1, 880: 1}
point_dic_door = {0: 1, 245: 1, 260: 1, 565: 1, 581: 1, 601: 1, 621: 1, 623: 1, 641: 1, 661: 1, 681: 1, 726: 1, 741: 1, 747: 1, 781: 1, 801: 1, 821: 1, 841: 1, 845: 1, 876: 1}

point_fix = {327: 10, 208: 30, 210: 10, 205: 20}
if __name__ == '__main__':
	map = mapcsv();
	map.showMap();
#	data_list2 = copy.deepcopy(data_list)
	data_list2 = copy.deepcopy(map.databack)
	print(data_list2)
	for i in range(0,3):
		row = data_list[i]
		for j in range(0,3):
			if row[j] > 98:
				data_list2[i][j] = 2
				if row[j] in point_fix:
					print(row[j])
					data_list2[i][j] = point_fix[row[j]]
			elif row[j] == 1:
				data_list2[i][j] = 100
			elif row[j] == 88:
				data_list2[i][j] = 999
			else:
				data_list2[i][j] = 1
	print(data_list2)
'''
class map2d:
	""" 
	"""  
	def __init__(self):
		self.data = [list("####################"),
					 list("#*****#************#"),
					 list("#*****#*****#*####*#"),
					 list("#*########*##******#"),
					 list("#*****#*****######*#"),
					 list("#*****#####*#******#"),
					 list("####**#*****#*######"),
					 list("#*****#**#**#**#***#"),
					 list("#**#*****#**#****#*#"),
					 list("####################")]

		self.w = 20
		self.h = 10
		self.passTag = '*'
		self.pathTag = 'o'

	def showMap(self):
		for x in xrange(0, self.h):
			for y in xrange(0, self.w):
				print(self.data[x][y], end='')
			print(" ")
		return;

	def setMap(self, point):
		self.data[point.x][point.y] = self.pathTag
		return;

	def isPass(self, point):
		if (point.x < 0 or point.x > self.h - 1) or (point.y < 0 or point.y > self.w - 1):
			return False;

		if self.data[point.x][point.y] == self.passTag:
			return True;
'''